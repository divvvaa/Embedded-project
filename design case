module audio_player (
  input wire clk,         // Clock input
  input wire rst,         // Reset input
  input wire button,      // Button input
  output wire speaker,    // Speaker output
  input wire volume_up,   // Volume up button input
  input wire volume_down, // Volume down button input
  input wire playlist[]   // Song playlist input
);

  // Define your Verilog logic here
  reg [1:0] volume;        // Volume control (00=Min, 11=Max)
  reg [15:0] song_duration;
  reg [2:0] current_song;  // Current song index in the playlist
  reg [1:0] playlist_size; // Number of songs in the playlist

  // Initialize
  initial begin
    volume = 2'b01;        // Initialize volume to medium
    current_song = 3'b000; // Start with the first song
    playlist_size = 3'b001; // Set playlist size (e.g., 1 song initially)
  end

  // State machine to control audio playback
  always @(posedge clk or posedge rst) begin
    if (rst) begin
      playing <= 0;
      song_duration <= 0;
    end else if (button && !playing) begin
      playing <= 1;
      song_duration <= playlist[current_song] * 50000; // Adjust this value for song duration
    end else if (playing && song_duration > 0) begin
      song_duration <= song_duration - 1;
    end else if (song_duration == 0) begin
      playing <= 0;
      // Automatically switch to the next song in the playlist
      if (current_song == playlist_size - 1) begin
        current_song <= 3'b000; // Restart playlist
      end else begin
        current_song <= current_song + 1;
      end
    end
  end

  // Volume control logic
  always @(posedge clk) begin
    if (volume_up && volume < 2'b11) begin
      volume <= volume + 1;
    end else if (volume_down && volume > 2'b00) begin
      volume <= volume - 1;
    end
  end

  // Speaker output control
  assign speaker = playing && (volume > 2'b00);

endmodule

